local Wagon,LastPos,Distance=nil,nil,0.0
RegisterNetEvent('lxr:supreme:begin',function(bi,mi,m) local cfg=Config.Wagons[m.wagon or 'standard'] or Config.Wagons.standard; local model=joaat(cfg.model); RequestModel(model) while not HasModelLoaded(model) do Wait(0) end; Wagon=CreateVehicle(model,m.to.x,m.to.y,m.to.z+3.0,0.0,true,false); SetEntityAsMissionEntity(Wagon,true,true); TaskWarpPedIntoVehicle(PlayerPedId(),Wagon,-1); if cfg.cargo then Citizen.InvokeNative(0xD80FAF919A2E56EA,Wagon,joaat(cfg.cargo)) end; if cfg.light then Citizen.InvokeNative(0xC0F0417A90402742,Wagon,joaat(cfg.light)) end; LastPos=GetEntityCoords(Wagon); Distance=0.0 end)
CreateThread(function() while true do if Wagon and DoesEntityExist(Wagon) then local pos=GetEntityCoords(Wagon); if LastPos then Distance=Distance + #(pos-LastPos) end; LastPos=pos; if IsEntityInWater(Wagon) then TriggerServerEvent('lxr:supreme:reportDamage',(StateDamage or 0.0)+Config.CargoDamage.major) elseif IsVehicleDamaged(Wagon) then TriggerServerEvent('lxr:supreme:reportDamage',(StateDamage or 0.0)+Config.CargoDamage.minor) end end Wait(Config.TickRateMs) end end)
function FinishMission(bi,mi) if not Wagon then return end local km=Distance/1000.0; TriggerServerEvent('lxr:supreme:complete',km,bi,mi); SetEntityAsMissionEntity(Wagon,true,true); DeleteVehicle(Wagon); Wagon=nil end
