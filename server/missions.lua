RegisterNetEvent('lxr:supreme:start',function(bi,mi) local src=source; State.missions[src]=State.missions[src] or {}; if State.missions[src].active then TriggerClientEvent('ox_lib:notify',src,{title='Delivery',description='You already have an active mission.',type='error'}) return end; State.missions[src]={active=true,board=bi,mission=mi,startedAt=os.time(),damage=0.0}; TriggerClientEvent('lxr:supreme:begin',src,bi,mi,Config.Boards[bi].deliveries[mi]) end)
RegisterNetEvent('lxr:supreme:abort',function() local src=source; State.missions[src]=nil; State.damage[src]=nil; State.stealth[src]=nil; TriggerClientEvent('lxr:supreme:end',src,'aborted') end)
RegisterNetEvent('lxr:supreme:reportDamage',function(d) local src=source; State.damage[src]=clamp(d,0.0,1.0) end)
RegisterNetEvent('lxr:supreme:stealth',function(clean) local src=source; State.stealth[src]=clean and true or false end)
RegisterNetEvent('lxr:supreme:complete',function(km,bi,mi) local src=source; local st=State.missions[src]; if not st or not st.active then return end; State.missions[src]=nil; local b=Config.Boards[bi]; local m=b and b.deliveries[mi]; local base=(Config.BasePayPerKm*(km or 1.0)); local reward,dmg=ComputePayout(src,base,m); Framework.addMoney(src,Config.MoneyAccount,reward,'LXRsupreme Delivery'); Logger.delivery(src,('$%d  dmg=%.2f  id=%s'):format(reward,dmg,m.id or m.label)); if Config.ItemRewards.enabled and math.random(1,100)<=Config.ItemRewards.chance then local it=Config.ItemRewards.pool[math.random(1,#Config.ItemRewards.pool)]; local amt=math.random(it.min,it.max); Framework.addItem(src,it.item,amt) end; exports['lxr-delivery-supreme']:awardXP(src,Config.Progression.xp.success); exports['lxr-delivery-supreme']:repChange(src,Config.Reputation.successGain); TriggerClientEvent('lxr:supreme:end',src,'complete',reward,dmg) end)
